{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\frank\\\\Desktop\\\\3. Projects\\\\1. Personal Projects\\\\Boxing Website Stuff\\\\Boxing Forum Website\\\\client\\\\src\\\\components\\\\Posts\\\\Post\\\\Post.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useContext } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport Comment from '../Comment/Comment';\nimport UserContext from '../../../context/UserContext';\nimport \"./Post.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Post = () => {\n  _s();\n  const location = useLocation();\n  const [comments, setComments] = useState([]);\n  const [articleContent, setArticleContent] = useState([]);\n  const [articleImage, setArticleImage] = useState([]);\n  const {\n    username,\n    setUsername\n  } = useContext(UserContext);\n  const [commentToPost, setCommentToPost] = useState(\"\");\n  const [isReadyToRender, setIsReadyToRender] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  useEffect(() => {\n    const fetchAndSortComments = async () => {\n      const fetchedComments = await fetchComments();\n      const fetchedCommentsJson = fetchedComments.rows;\n      const sortedComments = sortCommentsOnLevel(fetchedCommentsJson); // fetchedComments is not an array, it's an object\n      setComments(sortedComments);\n    };\n    fetchAndSortComments();\n    setIsReadyToRender(true);\n    fetchArticle();\n  }, []);\n  const handleReplySubmission = async () => {\n    const fetchedComments = await fetchComments();\n    setComments(fetchedComments.rows);\n  };\n  const handleSubmitCommentButton = async () => {\n    if (username == null) {} else {\n      const author = username;\n      const comment = commentToPost;\n      const idOfParentPost = location.state.id;\n      setIsLoading(true);\n      try {\n        await fetch(`http://localhost:5000/api/comments/${idOfParentPost}`, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            author: author,\n            comment: comment,\n            idOfParentPost: idOfParentPost,\n            level: 0\n          })\n        });\n        const fetchedComments = await fetchComments();\n\n        // while we await it, have the button turn grey, and have a little swirling loading sign replace the text on the button\n        setComments(fetchedComments.rows);\n        setCommentToPost(\"\");\n      } catch (error) {\n        console.log(\"uh oh! error is \", error);\n      } finally {\n        // setIsLoading(false);\n        setTimeout(() => {\n          setIsLoading(false);\n          const newCommentElement = document.getElementById('new-comment');\n          if (newCommentElement) {\n            newCommentElement.scrollIntoView({\n              behavior: 'smooth'\n            });\n\n            // Add the highlight class for the fade effect\n            newCommentElement.classList.add('highlight');\n          }\n        }, 1000);\n      }\n    }\n  };\n  const changeCommentToPost = event => {\n    setCommentToPost(event.target.value);\n  };\n  const fetchComments = async () => {\n    try {\n      const postId = location.state.id;\n      const response = await fetch(`http://localhost:5000/api/comments/${postId}`);\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.log(\"Error fetching comments : \", error);\n    }\n  };\n  const sortCommentsOnLevel = dataComments => {\n    // sort the comments on order, so all 0's in front, then 1's, etc\n\n    if (dataComments.length === 0) {\n      return dataComments;\n    }\n    const sortedDataComments = dataComments.sort((firstComment, secondComment) => {\n      if (firstComment.level > secondComment.level) {\n        return 1;\n      } else if (firstComment.level === secondComment.level) {\n        return 0;\n      } else return -1;\n    });\n    return sortedDataComments;\n  };\n  const divideCommentsIntoLevelArrays = () => {\n    // first, separate comments into new Level arrays - one array for all Level0's, another for Level1's, etc\n\n    // why does dCILA get called again when button is clicked?\n    const levelArrays = [];\n    var currLevel = 0;\n    while (true) {\n      const temp = comments.filter(comment => {\n        // comments isn't an array yet\n        return comment.level === currLevel;\n      });\n      if (temp.length === 0) {\n        break;\n      } else {\n        levelArrays.push(temp);\n        currLevel++;\n      }\n    }\n    return levelArrays;\n  };\n  const renderEachLevel = (levelArrays, currentComment, level) => {\n    const renderedComments = [];\n    const temp = [];\n    // render itself\n\n    renderedComments.push(renderComment(currentComment));\n\n    // if comment is on last level of levelArrays, we need to stop it cuz otherwise will \n    // trigger outOfBounds error\n    if (level === levelArrays.length - 1) {\n      return renderedComments;\n    } else {\n      // find all matching child comments in next level\n      for (let i = 0; i < levelArrays[level + 1].length; i++) {\n        if (levelArrays[level + 1][i].parent_comment_id == currentComment.id) {\n          // parentCommentId undefined?\n          temp.push(levelArrays[level + 1][i]);\n        }\n      }\n\n      // render all of its child comments\n\n      for (let i = 0; i < temp.length; i++) {\n        const arrayOfChildElementsHTML = renderEachLevel(levelArrays, temp[i], level + 1);\n        for (let j = 0; j < arrayOfChildElementsHTML.length; j++) {\n          renderedComments.push(arrayOfChildElementsHTML[j]);\n        }\n      }\n\n      // if no children, then return renderedComments\n\n      return renderedComments;\n    }\n\n    // 1) render itself\n\n    // 2) make empty array\n    // 3) go through next level array and add any posts whose parentComment matches postId to array\n    // 4) for every element in array : \n    // 5) renderComment(postId, level + 1)\n  };\n  const renderComment = comment => {\n    return (\n      /*#__PURE__*/\n      // <Comment />\n      // id={index === comments.length - 1 ? \"new-comment\" : null} \n      _jsxDEV(Comment, {\n        post: location.state.id,\n        author: comment.author,\n        comment: comment.content,\n        level: comment.level,\n        id: comment.id,\n        handleReplySubmission: handleReplySubmission\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 13\n      }, this)\n    );\n  };\n  const renderComments = () => {\n    if (comments.length === 0) {\n      // console.log(\"no comments available to render yet\");\n    } else {\n      const overallRenderedComments = [];\n      const levelArrays = divideCommentsIntoLevelArrays(); // not an array\n\n      for (let i = 0; i < levelArrays[0].length; i++) {\n        const arrayOfRecursiveElementsHTML = renderEachLevel(levelArrays, levelArrays[0][i], 0);\n        for (let j = 0; j < arrayOfRecursiveElementsHTML.length; j++) {\n          overallRenderedComments.push(/*#__PURE__*/React.cloneElement(arrayOfRecursiveElementsHTML[j], {\n            key: arrayOfRecursiveElementsHTML[j].props.id\n          }));\n        }\n      }\n      return overallRenderedComments;\n    }\n  };\n  const fetchArticle = async () => {\n    const response1 = await fetch(location.state.article_url);\n    const articleContents = await response1.json();\n    setArticleContent(articleContents.content);\n    try {\n      // const response2 = await fetch(location.state.image_url);\n\n      // console.log(\"2\");\n      // const articleImageBlob = await response2.blob();\n      // console.log(\"articleImage : \", articleImage);\n\n      // const articleImageUrl = URL.createObjectURL(articleImageBlob);\n\n      // setArticleImage(articleImageUrl);\n\n      console.log(\"finished\");\n    } catch (error) {\n      console.log(\"Error : \", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"post-title-and-content-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"post-title-div\",\n        children: location.state.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"post-image-div\",\n        children: articleImage == null ? /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 25\n        }, this) :\n        /*#__PURE__*/\n        // <img id = \"article-image\" src={articleImage} alt=\"Article Image\" />\n        _jsxDEV(\"img\", {\n          id: \"article-image\",\n          src: location.state.image_url,\n          alt: location.state.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"post-content-div\",\n        children: articleContent == null ? /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          children: articleContent\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      id: \"post-new-comment-box\",\n      value: commentToPost,\n      placeholder: \"Post comment here\",\n      onChange: changeCommentToPost\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      id: \"submit-comment-button\",\n      onClick: handleSubmitCommentButton,\n      children: isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"spinner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 22\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 24\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"comments-section-title\",\n      children: [\"All Comments : \", comments.length]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comments-section\",\n      children: isReadyToRender ? renderComments() : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading comments...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 55\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 264,\n    columnNumber: 9\n  }, this);\n};\n_s(Post, \"GBbmdZFb44TTXUjLnsNkk97Jf5Q=\", false, function () {\n  return [useLocation];\n});\n_c = Post;\nexport default Post;\nvar _c;\n$RefreshReg$(_c, \"Post\");","map":{"version":3,"names":["React","useState","useEffect","useContext","useLocation","Comment","UserContext","jsxDEV","_jsxDEV","Post","_s","location","comments","setComments","articleContent","setArticleContent","articleImage","setArticleImage","username","setUsername","commentToPost","setCommentToPost","isReadyToRender","setIsReadyToRender","isLoading","setIsLoading","fetchAndSortComments","fetchedComments","fetchComments","fetchedCommentsJson","rows","sortedComments","sortCommentsOnLevel","fetchArticle","handleReplySubmission","handleSubmitCommentButton","author","comment","idOfParentPost","state","id","fetch","method","headers","body","JSON","stringify","level","error","console","log","setTimeout","newCommentElement","document","getElementById","scrollIntoView","behavior","classList","add","changeCommentToPost","event","target","value","postId","response","data","json","dataComments","length","sortedDataComments","sort","firstComment","secondComment","divideCommentsIntoLevelArrays","levelArrays","currLevel","temp","filter","push","renderEachLevel","currentComment","renderedComments","renderComment","i","parent_comment_id","arrayOfChildElementsHTML","j","post","content","fileName","_jsxFileName","lineNumber","columnNumber","renderComments","overallRenderedComments","arrayOfRecursiveElementsHTML","cloneElement","key","props","response1","article_url","articleContents","children","title","src","image_url","alt","type","placeholder","onChange","onClick","className","_c","$RefreshReg$"],"sources":["C:/Users/frank/Desktop/3. Projects/1. Personal Projects/Boxing Website Stuff/Boxing Forum Website/client/src/components/Posts/Post/Post.js"],"sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport Comment from '../Comment/Comment';\r\nimport UserContext from '../../../context/UserContext';\r\nimport \"./Post.css\";\r\n\r\n\r\nconst Post = () => {\r\n\r\n    const location = useLocation();\r\n    const [comments, setComments] = useState([]);\r\n    const [articleContent, setArticleContent] = useState([]);\r\n    const [articleImage, setArticleImage] = useState([]);\r\n\r\n    const { username, setUsername } = useContext(UserContext);\r\n    const [commentToPost, setCommentToPost] = useState(\"\");\r\n    const [isReadyToRender, setIsReadyToRender] = useState(false);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    \r\n\r\n    useEffect(() => {\r\n        const fetchAndSortComments = async () => {\r\n            const fetchedComments = await fetchComments();\r\n            const fetchedCommentsJson = fetchedComments.rows;\r\n\r\n            const sortedComments = sortCommentsOnLevel(fetchedCommentsJson); // fetchedComments is not an array, it's an object\r\n            setComments(sortedComments);\r\n        };\r\n\r\n        fetchAndSortComments();\r\n        setIsReadyToRender(true);\r\n\r\n        fetchArticle();\r\n    }, []);\r\n\r\n    const handleReplySubmission = async () => {\r\n\r\n        const fetchedComments = await fetchComments();\r\n        setComments(fetchedComments.rows);\r\n\r\n    };\r\n\r\n    const handleSubmitCommentButton = async () => {\r\n\r\n        if (username == null) {\r\n\r\n        }\r\n        else {\r\n\r\n            const author = username;\r\n            const comment = commentToPost;\r\n            const idOfParentPost = location.state.id;\r\n\r\n            setIsLoading(true);\r\n            try {\r\n                await fetch(`http://localhost:5000/api/comments/${idOfParentPost}`, {\r\n                    method: \"POST\",\r\n                    headers: { \"Content-Type\": \"application/json\" },\r\n                    body: JSON.stringify({\r\n                        author: author,\r\n                        comment: comment,\r\n                        idOfParentPost: idOfParentPost,\r\n                        level: 0\r\n                    })\r\n                });\r\n\r\n                const fetchedComments = await fetchComments();\r\n\r\n                // while we await it, have the button turn grey, and have a little swirling loading sign replace the text on the button\r\n                setComments(fetchedComments.rows);\r\n                setCommentToPost(\"\");\r\n            }\r\n            catch (error) {\r\n                console.log(\"uh oh! error is \", error);\r\n            }\r\n            finally {\r\n                // setIsLoading(false);\r\n                setTimeout(() => {\r\n                    setIsLoading(false);\r\n\r\n                    const newCommentElement = document.getElementById('new-comment');\r\n                    if (newCommentElement) {\r\n                        newCommentElement.scrollIntoView({ behavior: 'smooth' });\r\n\r\n                        // Add the highlight class for the fade effect\r\n                        newCommentElement.classList.add('highlight');\r\n                    }\r\n                }, 1000);\r\n\r\n\r\n            }\r\n        }\r\n    };\r\n\r\n    const changeCommentToPost = (event) => {\r\n        setCommentToPost(event.target.value);\r\n    };\r\n\r\n    const fetchComments = async () => {\r\n        try {\r\n            const postId = location.state.id;\r\n            const response = await fetch(`http://localhost:5000/api/comments/${postId}`);\r\n\r\n            const data = await response.json();\r\n            return data;\r\n        }\r\n        catch (error) {\r\n            console.log(\"Error fetching comments : \", error);\r\n        }\r\n    };\r\n\r\n    const sortCommentsOnLevel = (dataComments) => {\r\n        // sort the comments on order, so all 0's in front, then 1's, etc\r\n\r\n        if (dataComments.length === 0) {\r\n            return dataComments;\r\n        }\r\n\r\n        const sortedDataComments = dataComments.sort((firstComment, secondComment) => {\r\n            if (firstComment.level > secondComment.level) {\r\n                return 1;\r\n            }\r\n            else if (firstComment.level === secondComment.level) {\r\n                return 0;\r\n            }\r\n            else return -1;\r\n        });\r\n        return sortedDataComments;\r\n    }\r\n\r\n    const divideCommentsIntoLevelArrays = () => {\r\n        // first, separate comments into new Level arrays - one array for all Level0's, another for Level1's, etc\r\n\r\n        // why does dCILA get called again when button is clicked?\r\n        const levelArrays = [];\r\n        var currLevel = 0;\r\n\r\n        while (true) {\r\n\r\n            const temp = comments.filter((comment) => { // comments isn't an array yet\r\n                return comment.level === currLevel;\r\n            });\r\n            if (temp.length === 0) {\r\n\r\n                break;\r\n            }\r\n            else {\r\n\r\n                levelArrays.push(temp);\r\n                currLevel++;\r\n            }\r\n        }\r\n\r\n\r\n\r\n        return levelArrays;\r\n    };\r\n\r\n    const renderEachLevel = (levelArrays, currentComment, level) => {\r\n\r\n        const renderedComments = [];\r\n        const temp = [];\r\n        // render itself\r\n\r\n        renderedComments.push(renderComment(currentComment));\r\n\r\n        // if comment is on last level of levelArrays, we need to stop it cuz otherwise will \r\n        // trigger outOfBounds error\r\n        if (level === levelArrays.length - 1) {\r\n\r\n            return renderedComments;\r\n        }\r\n        else {\r\n            // find all matching child comments in next level\r\n            for (let i = 0; i < levelArrays[level + 1].length; i++) {\r\n                if (levelArrays[level + 1][i].parent_comment_id == currentComment.id) { // parentCommentId undefined?\r\n                    temp.push(levelArrays[level + 1][i]);\r\n\r\n                }\r\n            }\r\n\r\n            // render all of its child comments\r\n\r\n            for (let i = 0; i < temp.length; i++) {\r\n                const arrayOfChildElementsHTML = renderEachLevel(levelArrays, temp[i], level + 1);\r\n                for (let j = 0; j < arrayOfChildElementsHTML.length; j++) {\r\n                    renderedComments.push(arrayOfChildElementsHTML[j]);\r\n                }\r\n            }\r\n\r\n            // if no children, then return renderedComments\r\n\r\n            return renderedComments;\r\n        }\r\n\r\n        // 1) render itself\r\n\r\n        // 2) make empty array\r\n        // 3) go through next level array and add any posts whose parentComment matches postId to array\r\n        // 4) for every element in array : \r\n        // 5) renderComment(postId, level + 1)\r\n\r\n    };\r\n\r\n    const renderComment = (comment) => {\r\n\r\n        return (\r\n            // <Comment />\r\n            // id={index === comments.length - 1 ? \"new-comment\" : null} \r\n\r\n            <Comment post={location.state.id} author={comment.author} comment={comment.content} level={comment.level} id={comment.id}\r\n                handleReplySubmission={handleReplySubmission} />\r\n        );\r\n    };\r\n\r\n    const renderComments = () => {\r\n        if (comments.length === 0) {\r\n            // console.log(\"no comments available to render yet\");\r\n        }\r\n        else {\r\n\r\n            const overallRenderedComments = [];\r\n            const levelArrays = divideCommentsIntoLevelArrays(); // not an array\r\n\r\n            for (let i = 0; i < levelArrays[0].length; i++) {\r\n                const arrayOfRecursiveElementsHTML = renderEachLevel(levelArrays, levelArrays[0][i], 0);\r\n                for (let j = 0; j < arrayOfRecursiveElementsHTML.length; j++) {\r\n                    overallRenderedComments.push(\r\n                        React.cloneElement(arrayOfRecursiveElementsHTML[j], { key: arrayOfRecursiveElementsHTML[j].props.id })\r\n                    );\r\n                }\r\n            }\r\n\r\n            return overallRenderedComments;\r\n        }\r\n    }\r\n\r\n    const fetchArticle = async () => {\r\n        const response1 = await fetch(location.state.article_url);\r\n        const articleContents = await response1.json();\r\n\r\n        setArticleContent(articleContents.content);\r\n\r\n        try {\r\n            // const response2 = await fetch(location.state.image_url);\r\n   \r\n            // console.log(\"2\");\r\n            // const articleImageBlob = await response2.blob();\r\n            // console.log(\"articleImage : \", articleImage);\r\n    \r\n            // const articleImageUrl = URL.createObjectURL(articleImageBlob);\r\n    \r\n    \r\n            // setArticleImage(articleImageUrl);\r\n            \r\n            console.log(\"finished\");\r\n        }\r\n        catch(error) {\r\n            console.log(\"Error : \", error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div id=\"post-title-and-content-section\">\r\n                <div id=\"post-title-div\">{location.state.title}</div>\r\n                <div id=\"post-image-div\">\r\n                    {articleImage == null ? (\r\n                        <div></div>\r\n                    ) : (\r\n                        // <img id = \"article-image\" src={articleImage} alt=\"Article Image\" />\r\n\r\n                        <img id=\"article-image\" src={location.state.image_url} alt={location.state.title} />\r\n\r\n                    )}\r\n                </div>\r\n                <div id=\"post-content-div\">\r\n                    {articleContent == null ? (\r\n                        <div></div>\r\n                    ) : (\r\n                        <div>{articleContent}</div>\r\n                    )}\r\n                </div>\r\n            </div>\r\n\r\n            <input type=\"text\" id=\"post-new-comment-box\" value={commentToPost}\r\n                placeholder=\"Post comment here\" onChange={changeCommentToPost}></input>\r\n            <button id=\"submit-comment-button\" onClick={handleSubmitCommentButton}>\r\n                {isLoading ?\r\n                    (<div className=\"spinner\"></div>)\r\n                    : (<div>\r\n                        Submit\r\n                    </div>)}\r\n            </button>\r\n\r\n            <div id=\"comments-section-title\">All Comments : {comments.length}</div>\r\n\r\n            <div className=\"comments-section\">\r\n                {isReadyToRender ? renderComments() : <p>Loading comments...</p>}\r\n\r\n                {/* {comments.map((comment, index) => (\r\n                    <div\r\n                        key={comment.id}\r\n                        id={index === comments.length - 1 ? \"new-comment\" : null} \r\n                        className=\"comment\"\r\n                    >\r\n                        {comment.content}\r\n                    </div>\r\n                ))} */}\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Post;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}